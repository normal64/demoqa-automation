{
  "stats": {
    "suites": 1,
    "tests": 2,
    "passes": 2,
    "pending": 0,
    "failures": 0,
    "start": "2023-06-07T16:08:19.481Z",
    "end": "2023-06-07T16:08:33.205Z",
    "duration": 13724,
    "testsRegistered": 2,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "d090260f-1459-4419-baaa-0b7623d1d637",
      "title": "",
      "fullFile": "D:\\Testing\\projects\\demoqa\\test\\registration.js",
      "file": "\\test\\registration.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "0cb70cd7-5ca4-4758-adf2-e9ab4b8edf85",
          "title": "task for go phptravels",
          "fullFile": "D:\\Testing\\projects\\demoqa\\test\\registration.js",
          "file": "\\test\\registration.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"task for go phptravels\"",
              "fullTitle": "task for go phptravels \"before all\" hook in \"task for go phptravels\"",
              "timedOut": false,
              "duration": 1486,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Set up the Selenium WebDriver instance\ndriver = await new Builder().forBrowser(\"chrome\").build();",
              "err": {},
              "uuid": "6dac68d1-2469-4dd2-a923-9f453d0b8f29",
              "parentUUID": "0cb70cd7-5ca4-4758-adf2-e9ab4b8edf85",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"task for go phptravels\"",
              "fullTitle": "task for go phptravels \"after all\" hook in \"task for go phptravels\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Quit the WebDriver instance\n   // await driver.quit();",
              "err": {},
              "uuid": "af73982c-fbbe-4199-b747-1ac5095b0729",
              "parentUUID": "0cb70cd7-5ca4-4758-adf2-e9ab4b8edf85",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "successful registration",
              "fullTitle": "task for go phptravels successful registration",
              "timedOut": false,
              "duration": 11225,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Navigate to the webpage\ndriver.get(\"https://demoqa.com/\");\nawait driver.manage().window().maximize();\n//navigation to registration form\nawait driver.wait(\n  until.elementIsVisible(driver.findElement(By.className(\"card\")))\n);\nconst secondElement = await driver.findElement(\n  By.css(\"div.card:nth-child(2)\")\n);\nawait secondElement.click();\nconst registrationFormLink = await driver.findElement(\n  By.xpath(\"//*[contains(text(), 'Practice Form')]\")\n);\nregistrationFormLink.click();\n// Wait until the page URL is \"https://demoqa.com/automation-practice-form\"\nawait driver.wait(\n  until.urlIs(\"https://demoqa.com/automation-practice-form\")\n);\nconst firstName = await driver.findElement(By.id(\"firstName\"));\nawait firstName.sendKeys(\"Demnmnis\");\nconst lastName = await driver.findElement(By.id(\"lastName\"));\nawait lastName.sendKeys(\"Poplavskii\");\nconst emailInput = await driver.findElement(By.id(\"userEmail\"));\nawait emailInput.sendKeys(\"hirethisguy@myspace.com\");\nconst genderInput = await driver.findElement(\n  By.css(\"label[for='gender-radio-1']\")\n);\nawait genderInput.click();\nconst mobilePhoneInput = await driver.findElement(By.id(\"userNumber\"));\nawait mobilePhoneInput.sendKeys(\"43211235677\");\n//picking date of birth\nconst dateOfBirthInput = await driver.findElement(\n  By.id(\"dateOfBirthInput\")\n);\nawait dateOfBirthInput.click();\n//year picking\nconst yearInputDateOfBirthInput = await driver.findElement(\n  By.className(\"react-datepicker__year-select\")\n);\nawait yearInputDateOfBirthInput.click();\nconst SelectedBirthYear = await driver.findElement(\n  By.xpath(\"//*[contains(text(), '2007')]\")\n);\nSelectedBirthYear.click();\nawait yearInputDateOfBirthInput.click();\n//month picking\nconst monthInputDateOfBirthInput = await driver.findElement(\n  By.className(\"react-datepicker__month-select\")\n);\nawait monthInputDateOfBirthInput.click();\nconst SelectedBirthMonth = await driver.findElement(\n  By.xpath(\"//*[contains(text(), 'August')]\")\n);\nawait SelectedBirthMonth.click();\nawait monthInputDateOfBirthInput.click();\n//picking day\nconst dayDateOfBirthInput = await driver.findElement(\n  By.className(\"react-datepicker__day react-datepicker__day--009\")\n);\nawait dayDateOfBirthInput.click();\n//submit form js because div intercepting click by selenium\nconst submitButton = await driver.findElement(By.id(\"submit\"));\nawait driver.executeScript(\"arguments[0].click();\", submitButton);\n// Check if the modal window is displayed\nconst isModalWindow = await isModalWindowDisplayed(driver);\ntry {\n  expect(isModalWindow).to.be.true;\n} catch (error) {\n  console.log(`error with modal popup`, error);\n}\n// Check if the header contains the expected text\nconst headerText = await getModalHeaderText(driver);\ntry {\n  expect(headerText).to.include(\"Thanks for submitting the form\");\n} catch (error) {\n  console.log(`error with displayed module`, error);\n}",
              "err": {},
              "uuid": "89bf8a25-a877-4293-826f-82eeb78a9f5d",
              "parentUUID": "0cb70cd7-5ca4-4758-adf2-e9ab4b8edf85",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Submit form button disabled if inputs are empty",
              "fullTitle": "task for go phptravels Submit form button disabled if inputs are empty",
              "timedOut": false,
              "duration": 1004,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Navigate to the webpage\ndriver.get(\"https://demoqa.com/\");\nawait driver.manage().window().maximize();\n//navigation to registration form\nawait driver.wait(\n  until.elementIsVisible(driver.findElement(By.className(\"card\")))\n);\nconst secondElement = await driver.findElement(\n  By.css(\"div.card:nth-child(2)\")\n);\nawait secondElement.click();\nconst registrationFormLink = await driver.findElement(\n  By.xpath(\"//*[contains(text(), 'Practice Form')]\")\n);\nregistrationFormLink.click();\n// Wait until the page URL is \"https://demoqa.com/automation-practice-form\"\nawait driver.wait(\n  until.urlIs(\"https://demoqa.com/automation-practice-form\")\n);\ntry{\n   // //submit form js because div intercepting click by selenium\nconst submitButton = await driver.findElement(By.id(\"submit\"));\nawait driver.executeScript(\"arguments[0].click();\", submitButton);\n // Check if the submit button is disabled\nconst isDisabled = await submitButton.isEnabled();\n// Assert the expected state of the submit button\nassert.strictEqual(isDisabled, false, 'Submit button is expected to be disabled.');\nconsole.log('Submit button is disabled as expected.');\n  } catch (error) {\nconsole.error(error.message);\n  } \n// const firstName = await driver.findElement(By.id(\"firstName\"));\n// await firstName.sendKeys(\"Demnmnis\");\n// const lastName = await driver.findElement(By.id(\"lastName\"));\n// await lastName.sendKeys(\"Poplavskii\");\n// const emailInput = await driver.findElement(By.id(\"userEmail\"));\n// await emailInput.sendKeys(\"hirethisguy@myspace.com\");\n// const genderInput = await driver.findElement(\n//   By.css(\"label[for='gender-radio-1']\")\n// );\n// await genderInput.click();\n// const mobilePhoneInput = await driver.findElement(By.id(\"userNumber\"));\n// await mobilePhoneInput.sendKeys(\"43211235677\");\n// //picking date of birth\n// const dateOfBirthInput = await driver.findElement(\n//   By.id(\"dateOfBirthInput\")\n// );\n// await dateOfBirthInput.click();\n// //year picking\n// const yearInputDateOfBirthInput = await driver.findElement(\n//   By.className(\"react-datepicker__year-select\")\n// );\n// await yearInputDateOfBirthInput.click();\n// const SelectedBirthYear = await driver.findElement(\n//   By.xpath(\"//*[contains(text(), '2007')]\")\n// );\n// SelectedBirthYear.click();\n// await yearInputDateOfBirthInput.click();\n// //month picking\n// const monthInputDateOfBirthInput = await driver.findElement(\n//   By.className(\"react-datepicker__month-select\")\n// );\n// await monthInputDateOfBirthInput.click();\n// const SelectedBirthMonth = await driver.findElement(\n//   By.xpath(\"//*[contains(text(), 'August')]\")\n// );\n// await SelectedBirthMonth.click();\n// await monthInputDateOfBirthInput.click();\n// //picking day\n// const dayDateOfBirthInput = await driver.findElement(\n//   By.className(\"react-datepicker__day react-datepicker__day--009\")\n// );\n// await dayDateOfBirthInput.click();\n// //submit form js because div intercepting click by selenium\n// const submitButton = await driver.findElement(By.id(\"submit\"));\n// await driver.executeScript(\"arguments[0].click();\", submitButton);\n// // Check if the modal window is displayed\n// const isModalWindow = await isModalWindowDisplayed(driver);\n// try {\n//   expect(isModalWindow).to.be.true;\n// } catch (error) {\n//   console.log(`error with modal popup`, error);\n// }",
              "err": {},
              "uuid": "3bd21d80-1ba1-420c-97aa-a2f9b67d9880",
              "parentUUID": "0cb70cd7-5ca4-4758-adf2-e9ab4b8edf85",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "89bf8a25-a877-4293-826f-82eeb78a9f5d",
            "3bd21d80-1ba1-420c-97aa-a2f9b67d9880"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 12229,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}